{"version":3,"sources":["components/Board.tsx","components/Tile.tsx","components/GameOverPopup.tsx","components/Game.tsx","App.tsx","index.js"],"names":["Board","tilesInPlay","className","Tile","IDvalue","onClick","isVisible","id","toString","style","visibility","GameOverPopup","props","trigger","score","setTrigger","Game","useState","settilesInPlay","setScore","isPopupVisible","setPopupVisible","correctClickID","tempTileArray","tilesClickedArray","shuffled","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","splice","checkClick","e","Number","parseInt","target","push","tiles","document","getElementsByClassName","i","innerHTML","forEach","button","includes","indexOf","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.489ba268.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ninterface BoardProps {\r\n    tilesInPlay:any[];\r\n}\r\n\r\nexport default function Board({tilesInPlay}:BoardProps) {\r\n\r\n    return (\r\n        <div className=\"board\">\r\n            {tilesInPlay}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\ninterface TileProps {\r\n    IDvalue: number;\r\n    onClick: any;\r\n    isVisible: boolean;\r\n  }\r\n\r\nconst Tile = ({IDvalue,onClick,isVisible} : TileProps) => {\r\n\r\n  return (\r\n    <button className=\"tile\" onClick={onClick} id={IDvalue.toString()} style={{ visibility: isVisible ? \"visible\" : \"hidden\" }}>\r\n      {IDvalue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from 'react'\r\n\r\nfunction GameOverPopup(props :any) : any {\r\n    return (props.trigger) ? (\r\n        <div className= \"popup\">\r\n            <div className= \"popup-inner\">\r\n                <h1 className=\"gameover\"> Game Over</h1>\r\n                <h2 className=\"score\"> Score of {props.score } </h2>\r\n                <button className = \"close-btn\" onClick={() => props.setTrigger(false)}><span>Try again</span></button>\r\n            </div>\r\n            \r\n        </div>\r\n    ) : \"\";\r\n}\r\n\r\nexport default GameOverPopup\r\n","import React, {useState} from 'react'\r\nimport Board from './Board'\r\nimport Tile from './Tile'\r\nimport Popup from './GameOverPopup'\r\n\r\nexport default function Game() {\r\nconst [tilesInPlay, settilesInPlay] = useState(4)\r\nconst [score, setScore] = useState(0)\r\nconst [isPopupVisible, setPopupVisible] = useState(false);\r\n  \r\nlet correctClickID = 1;\r\nconst tempTileArray: any[] = [];\r\nconst tilesClickedArray: any[] = [];\r\nconst shuffle = (array: number[]) => {\r\n    let currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  };\r\nlet numberOfTilesInGame: Array<number> = [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    13,\r\n    14,\r\n    15,\r\n    16,\r\n    17,\r\n    18,\r\n    19,\r\n    20,\r\n    21,\r\n    22,\r\n    23,\r\n    24,\r\n    25,\r\n    26,\r\n    27,\r\n    28,\r\n    29,\r\n    30,\r\n    31,\r\n    32,\r\n    33,\r\n    34,\r\n    35,\r\n    36,\r\n    37,\r\n    38,\r\n    39,\r\n    40,\r\n  ];\r\n\r\nlet shuffled = shuffle(numberOfTilesInGame).splice(0, tilesInPlay);\r\n\r\nconst checkClick = (e: any) => {\r\n\r\n  if (Number.parseInt(e.target.id) === 1) {\r\n    e.target.style.visibility = \"hidden\";\r\n    tilesClickedArray.push(e.target);\r\n    let tiles = document.getElementsByClassName(\"tile\")\r\n    for(let i = 0; i < tiles.length ; i++){\r\n      tiles[i].innerHTML = \"\"\r\n    }\r\n    correctClickID += 1;\r\n\r\n  } else if (Number.parseInt(e.target.id) === tilesInPlay && correctClickID === tilesInPlay) {\r\n    correctClickID = 1;\r\n    tilesClickedArray.push(e.target);\r\n    tilesClickedArray.forEach(button => {\r\n      button.style.visibility = \"visible\";\r\n      button.innerHTML = button.id;\r\n    });\r\n    setScore(tilesInPlay)\r\n    settilesInPlay(tilesInPlay + 1);\r\n\r\n  } else if (Number.parseInt(e.target.id) === correctClickID) {\r\n    e.target.style.visibility = \"hidden\";\r\n    tilesClickedArray.push(e.target);\r\n    correctClickID += 1;\r\n  } else{\r\n      setPopupVisible(true);\r\n      correctClickID = 1;\r\n      settilesInPlay(4);\r\n  }\r\n};\r\n\r\n\r\nfor (let i: number = 1; i <= 40; i++) {\r\n    \r\n    if (!shuffled.includes(i)) {\r\n        tempTileArray.push(\r\n        <Tile\r\n            key={i} \r\n            IDvalue={0} \r\n            onClick={checkClick}\r\n            isVisible={false}\r\n         />\r\n        );\r\n    } else if (shuffled.indexOf(i) === 0) {\r\n        tempTileArray.push(\r\n        <Tile\r\n            key={i}\r\n            IDvalue={shuffled.indexOf(i) + 1}\r\n            onClick={checkClick}\r\n            isVisible={true}\r\n        />\r\n        );\r\n    } else {\r\n        tempTileArray.push(\r\n        <Tile\r\n            key={i}\r\n            IDvalue={shuffled.indexOf(i) + 1}\r\n            onClick={checkClick}\r\n            isVisible={true}\r\n        />\r\n        );\r\n    }\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <Board tilesInPlay={tempTileArray}/>\r\n            <Popup trigger={isPopupVisible} score = {score} setTrigger={setPopupVisible}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport Game from \"./components/Game\";\r\nimport \"./index.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}